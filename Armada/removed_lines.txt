/*
From click method
if(activeE.withinMovement(inX,inY) && activeE.canMovePath2(inX,inY, delements) && activeE instanceof Ship){
				activeE.moveTo(inX, inY);
				Ship temp = (Ship) activeE;
				temp.setPlanetDocked(null);
}
//System.out.println("x, y:" + inX + ", " + inY);
for (DynamicElement d : delements) {
						//System.out.println("looking for ship 1");
						if(d.isIn(inX,inY) && d.getAlliance()!=activeE.getAlliance() && activeE.withinRange(inX,inY) && d.isTargetable()){
							//System.out.println("looking for ship 2");
							d.hullTakeDamage(activeE);
							activeE.setCanAttack(false);
							//setMode(0);
							return true;
						}
					}
					
//System.out.println("x, y:" + inX + ", " + inY);
				for (DynamicElement d : delements) {
					//System.out.println("looking for ship 1");
					if(d.isIn(inX,inY) && d.getAlliance()!=activeE.getAlliance() && activeE.withinRange(inX,inY) && d.isTargetable() && d.getEngine()>0){
						//System.out.println("looking for ship 2");
						d.engineTakeDamage(activeE);
						System.out.println("Engines now at: "+d.getEngine());
						activeE.setCanAttack(false);
						//setMode(0);
						return true;
					}
				}
				
				for (DynamicElement d : delements) {
					if(d.isIn(inX,inY) && (d.getAlliance()==0 || d.getAlliance() == activeE.getAlliance()) && activeE.distanceFrom(inX, inY) < 100 && d.isTargetable() && d instanceof Planet && activeE instanceof Ship){
						System.out.println("docking attempted");
						Planet p = (Planet)d;
						Ship s = (Ship) activeE;
						p.dock(s);
						return true;
					}
					
					if(d.isIn(inX,inY) && d.getAlliance()!= activeE.getAlliance() && activeE.distanceFrom(inX, inY) < 100 && d.isTargetable() && d instanceof Ship && activeE instanceof Ship){
						System.out.println("Boarding attempted");
						Ship s = (Ship) activeE;
						Ship t = (Ship) d;
						s.board(t);
						return true;
					}
				}
				
				System.out.println("Clicked: ("+inX+", "+inY+")");
				
				if(mode == 0 || activeE==null) { //selecting a menu
			    if(menus != null && menus.size() != 0){
				    for (Menu m : menus) {
					    //if(m.isIn(inX,inY)){
					    //	m.click();
					    //}
				    }
			    }
			
			    if(delements != null && delements.size() != 0){//selecting a ship
				    inX += viewRegion.getX(); inY += viewRegion.getY();
				    //System.out.println("x, y:" + inX + ", " + inY);
				    for (DynamicElement d : delements) {
					    if(d.isIn(inX,inY) && d.isTargetable()){
					        mode = 1;
						    activeE=d;
						    activeE.update();
						    //menus.add(d.getMenu());
						    return true;
					    }
				    }
			    }
			
		    }
	
	 * Calculates distance between the two inputs, order does not matter
	 
	public int distance(DynamicElement e1, DynamicElement e2){
		return (int)Math.sqrt(Math.pow(Math.abs((double)e1.getY()-(double)e2.getY()),2) + Math.pow(Math.abs((double)e1.getX()-(double)e2.getX()),2));
	}
	
	public int distance(DynamicElement e1, int inX, int inY){
		return (int)Math.sqrt(Math.pow(Math.abs((double)e1.getY()-(double)inY),2) + Math.pow(Math.abs((double)e1.getX()-(double)inX),2));
	}
	 
	

*/