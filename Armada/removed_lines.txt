/*
From click method
if(activeE.withinMovement(inX,inY) && activeE.canMovePath2(inX,inY, delements) && activeE instanceof Ship){
				activeE.moveTo(inX, inY);
				Ship temp = (Ship) activeE;
				temp.setPlanetDocked(null);
}
//System.out.println("x, y:" + inX + ", " + inY);
for (DynamicElement d : delements) {
						//System.out.println("looking for ship 1");
						if(d.isIn(inX,inY) && d.getAlliance()!=activeE.getAlliance() && activeE.withinRange(inX,inY) && d.isTargetable()){
							//System.out.println("looking for ship 2");
							d.hullTakeDamage(activeE);
							activeE.setCanAttack(false);
							//setMode(0);
							return true;
						}
					}
					
//System.out.println("x, y:" + inX + ", " + inY);
				for (DynamicElement d : delements) {
					//System.out.println("looking for ship 1");
					if(d.isIn(inX,inY) && d.getAlliance()!=activeE.getAlliance() && activeE.withinRange(inX,inY) && d.isTargetable() && d.getEngine()>0){
						//System.out.println("looking for ship 2");
						d.engineTakeDamage(activeE);
						System.out.println("Engines now at: "+d.getEngine());
						activeE.setCanAttack(false);
						//setMode(0);
						return true;
					}
				}
				
				for (DynamicElement d : delements) {
					if(d.isIn(inX,inY) && (d.getAlliance()==0 || d.getAlliance() == activeE.getAlliance()) && activeE.distanceFrom(inX, inY) < 100 && d.isTargetable() && d instanceof Planet && activeE instanceof Ship){
						System.out.println("docking attempted");
						Planet p = (Planet)d;
						Ship s = (Ship) activeE;
						p.dock(s);
						return true;
					}
					
					if(d.isIn(inX,inY) && d.getAlliance()!= activeE.getAlliance() && activeE.distanceFrom(inX, inY) < 100 && d.isTargetable() && d instanceof Ship && activeE instanceof Ship){
						System.out.println("Boarding attempted");
						Ship s = (Ship) activeE;
						Ship t = (Ship) d;
						s.board(t);
						return true;
					}
				}
				
				System.out.println("Clicked: ("+inX+", "+inY+")");
				
				if(mode == 0 || activeE==null) { //selecting a menu
			    if(menus != null && menus.size() != 0){
				    for (Menu m : menus) {
					    //if(m.isIn(inX,inY)){
					    //	m.click();
					    //}
				    }
			    }
			
			    if(delements != null && delements.size() != 0){//selecting a ship
				    inX += viewRegion.getX(); inY += viewRegion.getY();
				    //System.out.println("x, y:" + inX + ", " + inY);
				    for (DynamicElement d : delements) {
					    if(d.isIn(inX,inY) && d.isTargetable()){
					        mode = 1;
						    activeE=d;
						    activeE.update();
						    //menus.add(d.getMenu());
						    return true;
					    }
				    }
			    }
			
		    }
	
	 * Calculates distance between the two inputs, order does not matter
	 
	public int distance(DynamicElement e1, DynamicElement e2){
		return (int)Math.sqrt(Math.pow(Math.abs((double)e1.getY()-(double)e2.getY()),2) + Math.pow(Math.abs((double)e1.getX()-(double)e2.getX()),2));
	}
	
	public int distance(DynamicElement e1, int inX, int inY){
		return (int)Math.sqrt(Math.pow(Math.abs((double)e1.getY()-(double)inY),2) + Math.pow(Math.abs((double)e1.getX()-(double)inX),2));
	}
	 
	

*/

	/*
	private static BufferedImage loadImage(File f) {
        BufferedImage bi = null;
        try {
            bi = ImageIO.read(f);
        } catch (IOException e) {
            System.out.println("Failed to load background image");
        }
        return bi;
        
    }
    */
    
    for (DynamicElement de : delements) {
				if(de instanceof Planet){
					de.draw(g, viewRegion);
				}
			}
			for (DynamicElement de : delements) {
				if(de instanceof Ship){
					if(de.getAlliance() !=turn){
						de.draw(g, viewRegion);
					}
					
				}
			}
			for (DynamicElement de : delements) {
				if(de instanceof Ship){
					if(de.getAlliance() ==turn){
						de.draw(g, viewRegion);
					}
				}
			}
			
			
			//if(currentX == 0 && currentY == 0) {}
			
			
			//private  ArrayList<Menu> menus;
			
			//menus = new ArrayList<Menu>();
			
			
			
			
			public void toggleTurn(){
		if(turn==1) turn=2;
		else turn=1;	
		setMode(1);
		startTurn();		
	}
	
	public void startTurn(){
	    mseconds = TURN_TIME;
		activeE=null;
		mode=1;
		if(delements != null && delements.size() != 0){//selecting a ship
			for (DynamicElement d : delements) {
				//System.out.println("looking for ship 1");
				d.startOfTurn(this);
			}
		}
	}
	
	    // Information for computing time remaining for current turn
    private static final double TURN_TIME = 180000.0;
    private double mseconds = TURN_TIME;
    private long lastTime = 0;
    
    -FROM HUDmanager-
    
    	/*
	public boolean click(int inX, int inY){
		if(items.click(inX,inY))return true;
		if(map.click(inX,inY))return true;
		return false;
	}
	*/
	
		/**
	    @return A view layer that draws all of the HUDs associated with this HUD system.
	*/
	/*
	public ViewLayer getViewLayer() {
	    return viewLayer;
	}
	*/
	
	/*
	private void updateLocations() {
	    for (HUD h : huds) {
	        HUD.Position p = h.getPosition();
	        BoundingRectangle r = h.getBoundingRectangle();
	        if(gc != null) {
		        if (p == HUD.Position.STATIC) continue;
		        if (p == HUD.Position.TOP_LEFT) {
			        r.setX(10);
			        r.setY(TurnHUD.BAR_HEIGHT);
			    }
		        if (p == HUD.Position.TOP_RIGHT) {
			        r.setX(gc.getViewWidth()-r.width);
			        r.setY(TurnHUD.BAR_HEIGHT);
			    }
		        if (p == HUD.Position.BOTTOM_LEFT) {
			        r.setX(10);
			        r.setY(gc.getViewHeight() - r.height - 10);
			    }
		        if (p == HUD.Position.BOTTOM_RIGHT) {
			        r.setX(gc.getViewWidth()-r.width - 10);
			        r.setY(gc.getViewHeight() - r.height - 10);
			    }
		        if (p == HUD.Position.ITEM_POSITION) {
			        r.setX(gc.getViewWidth()-r.width);
			        r.setY(gc.getViewHeight()/2 - r.height/2);
			    }
			    if (p == HUD.Position.MODE_POSITION) {
		            r.setX(0);
		            r.setY(0);
		        }
		        if (p == HUD.Position.CENTERED) {
		            System.out.println("CENTERED");
		            r.setX(grid.getAp().getWidth()/2-r.width/2);
		            r.setY(grid.getAp().getHeight()/2 - r.height/2);
		        }
		    }
	    }
	}
	*/
	
	/*
	private void updateLocations() {
	    for (Position p: huds2.keySet()) {
	        System.out.println(p);
	        HUD h = huds2.get(p);
	        BoundingRectangle r = h.getBoundingRectangle();
	        if(gc != null) {
		        if (p == Position.STATIC) continue;
		        if (p == Position.TOP_LEFT) {
			        r.setX(10);
			        r.setY(TurnHUD.BAR_HEIGHT);
			    }
		        if (p == Position.TOP_RIGHT) {
			        r.setX(gc.getViewWidth()-r.width);
			        r.setY(TurnHUD.BAR_HEIGHT);
			    }
		        if (p == Position.BOTTOM_LEFT) {
			        r.setX(10);
			        r.setY(gc.getViewHeight() - r.height - 10);
			    }
		        if (p == Position.BOTTOM_RIGHT) {
			        r.setX(gc.getViewWidth()-r.width - 10);
			        r.setY(gc.getViewHeight() - r.height - 10);
			    }
		        if (p == Position.ITEM_POSITION) {
			        r.setX(gc.getViewWidth()-r.width);
			        r.setY(gc.getViewHeight()/2 - r.height/2);
			    }
			    if (p == Position.MODE_POSITION) {
		            r.setX(0);
		            r.setY(0);
		        }
		    }
	    }
	}
	*/
	
	/*
	public HUDmanager(GameController gc) {
	    super(new BoundingRectangle(
	    huds2 = new Hashtable<Position, HUD>();
	    this.gc = gc;
	}
	*/
	
	/*
		addHUD(mode, Position.MODE_POSITION);
		addHUD(stat, Position.TOP_RIGHT);
		addHUD(map, Position.BOTTOM_RIGHT);
		addHUD(items, Position.ITEM_POSITION);
		addHUD(turn, Position.STATIC);
		*/
		
		/*
	
	switch(location){
		    case 0: return;
		    case 1:
			    r.x= 10;
			    r.y=TurnHUD.BAR_HEIGHT;
			    break;
		    case 2:
			    r.x = grid.getAp().getWidth()-r.width;
			    r.y=TurnHUD.BAR_HEIGHT;
			    break;
		    case 3:
			    r.x = 10;
			    r.y = grid.getAp().getHeight() - r.height - 10;
			    break;
		    case 4:
			    r.x = grid.getAp().getWidth()-r.width - 10;
			    r.y = grid.getAp().getHeight() - r.height - 10;
			    break;
		    case 5:
			    r.x = grid.getAp().getWidth()/2-r.width/2;
			    r.y=TurnHUD.BAR_HEIGHT;
			    break;
		    case 6:
			    r.x = grid.getAp().getWidth()-r.width;
			    r.y = grid.getAp().getHeight()/2 - r.height/2;
			    break;
		    case 7:
			    r.x = grid.getAp().getWidth()/2-r.width/2;
			    r.y = grid.getAp().getHeight() - r.height;
			    break;
		    case 8:
			    r.x = 5;
			    r.y = grid.getAp().getHeight()/2 - r.height/2;
			    break;
		    case 9:
		        r.x = 0;
		        r.y = 0;
		        break;
		    case 10:
		        r.x = grid.getAp().getWidth()/2-r.width/2;
		        r.y = grid.getAp().getHeight()/2 - r.height/2;
		        break;
		        
		        */
		        
		        
-FROM HUD-

/*
	public HUD(BoundingRectangle b, int l) {
	    super(b);
	    location = l;
	}
    */	
	/**
	    Basic Constructor that also takes a Grid.
	*/
	/*
	public HUD(BoundingRectangle b, Grid gr){
		super(b);
		grid=gr;
	}
    */	
    
    /*
		if(grid != null) {
		    switch(position){
		    case STATIC: return;
		    case TOP_LEFT:
			    r.x= 10;
			    r.y=TurnHUD.BAR_HEIGHT;
			    break;
		    case TOP_RIGHT:
			    r.x = grid.getAp().getWidth()-r.width;
			    r.y=TurnHUD.BAR_HEIGHT;
			    break;
		    case BOTTOM_LEFT:
			    r.x = 10;
			    r.y = grid.getAp().getHeight() - r.height - 10;
			    break;
		    case BOTTOM_RIGHT:
			    r.x = grid.getAp().getWidth()-r.width - 10;
			    r.y = grid.getAp().getHeight() - r.height - 10;
			    break;
		    case ITEM_POSITION:
			    r.x = grid.getAp().getWidth()-r.width;
			    r.y = grid.getAp().getHeight()/2 - r.height/2;
			    break;
			case MODE_POSITION:
		        r.x = 0;
		        r.y = 0;
		        break;
		    case CENTERED:
		        r.x = grid.getAp().getWidth()/2-r.width/2;
		        r.y = grid.getAp().getHeight()/2 - r.height/2;
		        break;
		    }
		}
		*/
		
		/*
	public HUD(BoundingRectangle b, GameController gc, int l) {
	    super(b);
	    this.gc = gc;
	    this.location = l;
	}
	*/
	
	/** The grid that this HUD gets its information from. */
	//protected Grid grid;
	/** The location setting to place this HUD onscreen. 0=static, 1+ is dynamic, 1= top left, 2= top right, 3 = bot left, 4 = bot right.*/
	protected int location;

			
			