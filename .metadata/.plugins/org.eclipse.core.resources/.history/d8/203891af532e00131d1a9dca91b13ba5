import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class TestPanel extends JPanel {
	
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		
		
		private int mvTime;//total moving time (includes rotation time) <<very inaccurate
		private int status;//0=draw DE on its coord. 1=rotate DE. 2= move DE to new coord.
		private int moveX;
		private int moveY;
		private double rotationAngle;
		private double angleLeft;
		private int deltaX;
		private int deltaY;
		private int moveXLeft;
		private int moveYLeft;
		private DynamicAnimationHelper da;
		public TestPanel(DynamicElement de){
			da = new DynamicAnimationHelper(de);
			mvTime=0;
			status=0;
			moveX=0;
			moveY=0;
			rotationAngle=0;
			angleLeft=0;
			deltaX=0;
			deltaY=0;
			moveXLeft=0;
			moveYLeft=0;
		}
		
		public void move(int x, int y, int t){
			mvTime=t;
			moveX=x;
			moveY=y;
			status=1;
			angleLeft=rotationAngle=da.calcRotationAngle(moveX, moveY);
			deltaX=moveXLeft=moveX-da.getDE().getX();
			deltaY=moveYLeft=moveY-da.getDE().getY();			
			while(status!=0)
			{
	        	repaint();
	        	try {
	        		Thread.sleep(10);
	        	} catch (InterruptedException e) {
	        		e.printStackTrace();
	        	}
			}
			double angle = Math.toDegrees(Math.atan2(deltaY, deltaX));
			if(angle<0)
				angle=360+angle;
			da.getDE().setAngle(angle);
			da.getDE().setX(moveX);
			da.getDE().setY(moveY);
			repaint();
		}
		public void paintComponent(Graphics g){
			//-------default background repaint--------\\
			Graphics2D g2 = (Graphics2D) g;
			Color c= g2.getColor();
			g2.setColor(getBackground());
			g2.fillRect(0,0,this.getWidth(),this.getHeight());
			g2.setColor(c);
			//------------------------------------------\\
			
			//--------code need for move----------------\\
			switch(status){
			case 0:
				da.draw(g);
				System.out.println("a= "+angleLeft+" deltaA= "+rotationAngle+" angle=" +da.getDE().getAngle());
				System.out.println("xl= "+moveXLeft+" dx= "+deltaX+" x= "+da.getDE().getX());
				System.out.println("yl= "+moveYLeft+" dy= "+deltaY+" y= "+da.getDE().getY());
				break;
			case 1:				
				System.out.println("a= "+angleLeft+" deltaA= "+rotationAngle+" angle=" +da.getDE().getAngle());
				rotate(g);
				break;
			case 2:
				System.out.println("xl= "+moveXLeft+" dx= "+deltaX+" x= "+da.getDE().getX());
				System.out.println("yl= "+moveYLeft+" dy= "+deltaY+" y= "+da.getDE().getY());
				moveHelper(g);
				break;
			}
			//------------------------------------------\\
		}
		public void rotate(Graphics g){
			
			if(rotationAngle!=0 && angleLeft/rotationAngle>0)
			{
				da.getDE().setAngle(da.getDE().getAngle()+rotationAngle/(mvTime/2));
				da.draw(g);
	        	angleLeft-=rotationAngle/(mvTime/2);
	        	
	        }
			else
				status=2;
		}
		public void moveHelper(Graphics g){
			boolean doneMovingX=false;
			boolean doneMovingY=false;
			if(deltaX!=0 && (double)moveXLeft/deltaX>0){
				int temp=deltaX/(mvTime/2);
				if(temp==0)
					temp=1;
				da.getDE().setX(da.getDE().getX()+temp);
				da.draw(g);
				moveXLeft-=temp;
			}
			else
				doneMovingX=true;
			if(deltaY!=0 && (double)moveYLeft/deltaY>0){
				int temp=deltaY/(mvTime/2);
				if(temp==0)
					temp=1;
				da.getDE().setY(da.getDE().getY()+temp);
				da.draw(g);
				moveYLeft-=temp;
			}
			else
				doneMovingY=true;
			if(doneMovingY&&doneMovingX)
				status=0;
			
		}
		public static void main(String[] args) {
			int x=200;
			int y=200;
			int w=50;
			int h=50;
			double an=45;
			String img="fighter";
			int s=100;
			int all = 1;
			
			DynamicElement de = new DynamicElement(x,y,w,h,an,img,0,0,0,s,all,0,0);
			
			TestPanel tp = new TestPanel(de);
			
			JFrame frame = new JFrame("Animation Test");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			int frameSize=800;
			
			frame.getContentPane().add( BorderLayout.CENTER, tp );
			frame.setSize( frameSize, frameSize );
	        frame.setVisible(true);
	        
	        tp.move(500,600,200);
		}
}
