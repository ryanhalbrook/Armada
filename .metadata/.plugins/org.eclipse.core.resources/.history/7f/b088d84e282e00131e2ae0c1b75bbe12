import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;













import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class DynamicAnimation {
	
	private DynamicElement e;
	private BufferedImage image;
	private AffineTransform at;
	private final int imageWidth, imageHeight;
	public DynamicAnimation(DynamicElement el){
		e=el;
		at= new AffineTransform();
		loadImage(e.getImage());
		imageWidth=image.getWidth();
		imageHeight=image.getHeight();
	}
	
	private void loadImage(String img) {
		
		try{
			File f= new File("image/"+img+".png");
			image= ImageIO.read(f);
		}
		catch(IOException e){
			e.printStackTrace();
			System.out.println("IMAGE COULD NOT BE FOUND");
		}
	}
	public void draw(Graphics g){
		Graphics2D g2 = (Graphics2D)g;
		AffineTransform ori = g2.getTransform();
		
		at.translate(e.getX(), e.getY());
		at.rotate(Math.toRadians(e.getAngle()));
		at.translate(-e.getWidth()/2,-e.getHeight()/2);
		at.scale(e.getWidth()/(double)imageWidth, e.getHeight()/(double)imageHeight);
		g2.drawImage(image, at, null);
		
		/*g2.setTransform(ori);
		AffineTransform rotate = new AffineTransform();
		Rectangle rect = new Rectangle(0, 0, 50, 50);
		rotate.translate(e.getX(), e.getY());
		g2.transform(rotate);
		rotate.setToRotation(Math.toRadians(45));
		rotate.translate(-rect.getWidth()/2, -rect.getHeight()/2);
		
		g2.transform(rotate);
		g2.draw(rect);
		*/
		at=ori;
	}
	public void move(int x, int y, long t, JComponent j, Graphics g){
		int deltaX = x-e.getX();
		int deltaY = y-e.getY();
		double angle = Math.toDegrees(Math.atan2(deltaY, deltaX));
		double deltaA;
		if(x<0)
			angle+=180;
		if(angle<0)
			angle=360-angle;
		if(Math.abs(e.getAngle()-angle)<180)
			deltaA=e.getAngle()-angle;
		else
			deltaA=angle-e.getAngle();
		
		double a=0;
		while(a!=deltaA)
		{
			a=rotate(a,deltaA,t/2,g);
        	j.repaint();
        	try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
        }
		
	}
	private double rotate(double a, double maxA,long t, Graphics g){
		e.setAngle(e.getAngle()+a);
		if(maxA<0)
			a-=maxA/t;
		else
			a+=maxA/t;
		draw(g);
		return a;
	}
	public DynamicElement getDE() {
		return e;
	}

	public void setDE(DynamicElement e) {
		this.e = e;
	}

	public static void main(String[] args) {
		
		JFrame frame = new JFrame("Animation Test");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		int frameSize=400;
		JPanel jp = new JPanel(){
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			int x=200;
			int y=200;
			int w=50;
			int h=50;
			double an=45;
			String img="fighter";
			int s=100;
			int all = 1;
			DynamicElement de = new DynamicElement(x,y,w,h,an,img,0,0,0,s,all,0,0);
			DynamicAnimation a = new DynamicAnimation(de);
			public void paintComponent(Graphics g){
				System.out.print(de.getAngle());
				a.draw(g);
				a.move(300, 300, 2000, this, g);
			}
		};
		frame.getContentPane().add( BorderLayout.CENTER, jp );
		frame.setSize( frameSize, frameSize );
        frame.setVisible(true);
        
        
	}

	
}
